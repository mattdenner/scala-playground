---
layout: default
title: Scalaz's OptionW
tested_by: "scalaz/OptionWSpec"
---
* it's extending the behaviour of `Option[T]` through the use of [an implicit conversion](https://github.com/scalaz/scalaz/blob/release/6.0.4/core/src/main/scala/scalaz/OptionW.scala#L130);
* you get a typesafe `None` by using `none[T]`, as well as the ability to get a `Some` from an object with `x.some`;
* [`cata`](https://github.com/scalaz/scalaz/blob/release/6.0.4/core/src/main/scala/scalaz/OptionW.scala#L10) allows you to do something with `Some` and something with `None`, independently;
* [`fold`](https://github.com/scalaz/scalaz/blob/release/6.0.4/core/src/main/scala/scalaz/OptionW.scala#L16) is an alias for `cata`, but I can't get it called as it clashes with stdlib folds;
* it's more obvious to use [`some`](https://github.com/scalaz/scalaz/blob/release/6.0.4/core/src/main/scala/scalaz/OptionW.scala#L33), as in `x.some(f).none(v)`, than `cata` or `fold` IMO;
* [`orZero`](https://github.com/scalaz/scalaz/blob/release/6.0.4/core/src/main/scala/scalaz/OptionW.scala#L82) might be useful when mapping a collection of `Option`.
