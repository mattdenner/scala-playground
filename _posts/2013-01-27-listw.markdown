---
layout: default
title: Scalaz's ListW
tested_by: "scalaz/ListWSpec"
---
* another **type class** (*pimp*, which apparently isn't PC any more) that extends the behaviour of the core `List[T]` class;
* as with `OptionW` adding the `none[T]`, we get `nil[T]` for a type safe `Nil`;
* [`intersperse`](https://github.com/scalaz/scalaz/blob/release/6.0.4/core/src/main/scala/scalaz/ListW.scala#L8) puts entries inbetween the entries in the list;
* [`intercalate`](https://github.com/scalaz/scalaz/blob/release/6.0.4/core/src/main/scala/scalaz/ListW.scala#L18) does the same, except that it's a `List[T]`, so it's kind of `List[T].flatMap` from one perspective;
* nothing much interesting for `powerset`, `tails`, `pairs` and `stripPrefix`;
* I have no idea why [`mapAccumLeft`](https://github.com/scalaz/scalaz/blob/release/6.0.4/core/src/main/scala/scalaz/ListW.scala#L88) and
* [`mapAccumRight`](https://github.com/scalaz/scalaz/blob/release/6.0.4/core/src/main/scala/scalaz/ListW.scala#L96) are there but they do what you expect: map *and* accumulate (or fold!)
* at the moment [`toNel`](https://github.com/scalaz/scalaz/blob/release/6.0.4/core/src/main/scala/scalaz/ListW.scala#L29) and
* [`<^>`](https://github.com/scalaz/scalaz/blob/release/6.0.4/core/src/main/scala/scalaz/ListW.scala#L40) are hard to check because `assert_===` needs more that I haven't got to yet!

FYI, "NEL" is a "Non-Empty List", and I'm not sure what the obsession with odd operators is, yet.
